import arcade

Width = 1200
Height = 800
# button stuff
BTN_X = 0
BTN_Y = 1
BTN_WIDTH = 2
BTN_HEIGHT = 3
BTN_IS_CLICKED = 4
BTN_COLOR = 5
BTN_CLICKED_COLOR = 6
button1 = [200, 200, 300, 50, False, arcade.color.BLUE, arcade.color.RED]
button2 = [200, 140, 100, 30, False, arcade.color.BLUE, arcade.color.RED]
# different screens
current_screen = "menu"
Instruction_Button = [Width - 800, Height - 500, 175, 50, arcade.color.GRAY]
Game_Button = [Width - 600, Height - 600, 175, 50, arcade.color.BLACK]

# grid
grid_col_1 = arcade.color.GREEN
grid_col_2 = arcade.color.DARK_GREEN

gridGenerator = [100 * k for k in range(0, 9)]

mousePos = [0, 0]
piecePos = [50, 50]
selected = -1

# zombie moving
zombie_x_positions = [800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800]
zombie_y_positions = [130, 250, 450, 230, 13, 100, 52, 340, 259, 636, 547]


def setup():
    arcade.open_window(Width, Height, "My Arcade Game")
    arcade.set_background_color(arcade.color.WHITE)
    arcade.schedule(update, 1 / 60)
    window = arcade.get_window()
    window.on_draw = on_draw
    window.on_key_press = on_key_press
    window.on_key_release = on_key_release
    window.on_mouse_press = on_mouse_press
    window.on_mouse_release = on_mouse_release
    window.on_mouse_motion = mouse_motion

    arcade.run()


def setup_grid(color_1, color_2):
    def row(y_val):
        for x in gridGenerator:
            if y_val % 200 == 0:
                if x % 200 == 0:
                    arcade.draw_rectangle_filled(x, y_val, 200, 200, color_1)

                else:
                    arcade.draw_rectangle_filled(x, y_val, 200, 200, color_2)

            else:
                if x % 200 == 0:
                    arcade.raw_rectangle_filled(x + 100, y_val, 200, 200,
                                          color_1)

                else:
                    arcade.draw_rectangle_filled(x + 100, y_val, 200, 200,
                                          color_2)

    for y in gridGenerator:
        row(y)


def custom_round(x, base=50):
    return base * round(x / base)


def draw_piece():
    if piecePos[0] % 100 != 0:
        piecePos[0] = custom_round(piecePos[0])

    if piecePos[1] % 100 != 0:
        piecePos[1] = custom_round(piecePos[1])

    if (piecePos[0] % 100 == 0) or (piecePos[1] % 100 == 0):
        arcade.draw_circle_filled(piecePos[0], piecePos[1], 45, arcade.color.BLACK)

def update(delta_time):
    arcade.setup_grid(grid_col_1, grid_col_2)
    arcade.draw_piece()

    print("Mouse: " + "(" + str(mousePos[0]) + ", " + str(
        mousePos[1]) + ")" + " | " + "Selected: " + str(
        selected) + " | " + "Piece: " + "(" + str(piecePos[0]) + ", " + str(
        piecePos[1]) + ")")
    for index in range(len(zombie_x_positions)):
        zombie_x_positions[index] -= 2.5


def on_draw():
    arcade.start_render()
    # menu
    if current_screen == "menu":
        arcade.set_background_color(arcade.color.GREEN)
        arcade.draw_text("Pants VS Zombies", Width / 2, Height - 100, arcade.color.BLACK, font_size=30,
                         anchor_x="center")
        draw_button(Instruction_Button)
        draw_button(Game_Button)
    if current_screen == "Instructions":
        arcade.set_background_color(arcade.color.GRAY)
        arcade.draw_text("Instructions", Width / 2, Height - 100, arcade.color.BLACK, font_size=30, anchor_x="center")
    if current_screen == "Game":
        # background of game
        arcade.draw_xywh_rectangle_filled(0, 0, Width, Height-120, arcade.color.GREEN)

        # zombies
        for c, d in zip(zombie_x_positions, zombie_y_positions):
            arcade.draw_circle_filled(c, d, 30, arcade.color.BLUE)
        # button
        draw_button(button1)
        draw_button(button2)


def on_key_press(key, modifiers):
    pass


def on_key_release(key, modifiers):
    pass


def on_mouse_press(x, y, button, modifiers):
    global selected, x_req, y_req

    x_req = piecePos[0] - 50 <= mousePos[0] <= piecePos[0] + 50
    y_req = piecePos[1] - 50 <= mousePos[1] <= piecePos[1] + 50

    if button == MOUSE_BUTTON_LEFT and x_req and y_req:
        selected = -selected

    print(f"Click at ({x}, {y})")
    global current_screen

    if mouse_hover(x, y, button1):
        button1[BTN_IS_CLICKED] = True
    if mouse_hover(x, y, button2):
        button2[BTN_IS_CLICKED] = True

    if mouse_hover(x, y, Instruction_Button):
        current_screen = "Instructions"
    if mouse_hover(x, y, Game_Button):
        current_screen = "Game"


def mouse_motion(x, y, dx, dy):
    mousePos[0] = x
    mousePos[1] = y

    if selected == 1 and x_req and y_req:
        piecePos[0] = mousePos[0]
        piecePos[1] = mousePos[1]


def on_mouse_release(x, y, button, modifiers):
    button1[BTN_IS_CLICKED] = False
    button2[BTN_IS_CLICKED] = False


def mouse_hover(x, y, button) -> bool:
    if (x > button[BTN_X] and x < button[BTN_X] + button[BTN_WIDTH] and y > button[BTN_Y]
        and y < button[BTN_Y] + button[BTN_HEIGHT]):
        return True
    else:
        return False


def draw_button(button):
    # Select the appropriate color to draw with
    if button1[BTN_IS_CLICKED]:
        color = button1[BTN_CLICKED_COLOR]
    else:
        color = button1[BTN_COLOR]

    if button2[BTN_IS_CLICKED]:
        color = button2[BTN_CLICKED_COLOR]
    else:
        color = button2[BTN_COLOR]

        # Draw button1
    arcade.draw_xywh_rectangle_filled(button[BTN_X],
                                      button[BTN_Y],
                                      button[BTN_WIDTH],
                                      button[BTN_HEIGHT],
                                      color)


if __name__ == '__main__':
    setup()
